import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";

import { expect } from "chai";
import { beefIn, beefOut, beefOutAndSwap } from "./utils";
import { runNetworkDescribe } from "../../utils/optional-tests";
import { NetworkName } from "../../../hardhat.config";
import { optimismContracts } from "../../constants";
import { StrategyHopSolidlyOpDeployment } from "./deployment/StrategyHopSolidly.deployment";

runNetworkDescribe("Strategy Hop Solidly zap tests", NetworkName.OPTIMISM, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin, strategyHop } = await loadFixture(StrategyHopSolidlyOpDeployment);
    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1

    expect(stableCoin.address).eq(optimismContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(optimismContracts.oneInchRouter);
    expect(weth.address).eq(optimismContracts.tokens.WETH.token);
  });

  it("zap in test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyHopSolidlyOpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a1000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000003115f77abfba35f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000012500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f00a0fbb7cd06009da11ff60bfc5af527f58fd61679c3ac98d040d90000000000000000000001000b2c639c533813f4aa9d7837caf62653d097ff857f5c764cbc14f9669b88837ca1490cca17c3160702a000000000000000000000000000000000000000000000000002abf5dee06f6036ee63c1e500766854992bd5363ebeeff0113f5a5795796befab7f5c764cbc14f9669b88837ca1490cca17c3160700a0fbb7cd06807ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d51f32b1c2345538c0c6f582fcb022739c4a194ebb42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  });

  it("zap out test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyHopSolidlyOpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a1000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000003115f77abfba35f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000012500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f00a0fbb7cd06009da11ff60bfc5af527f58fd61679c3ac98d040d90000000000000000000001000b2c639c533813f4aa9d7837caf62653d097ff857f5c764cbc14f9669b88837ca1490cca17c3160702a000000000000000000000000000000000000000000000000002abf5dee06f6036ee63c1e500766854992bd5363ebeeff0113f5a5795796befab7f5c764cbc14f9669b88837ca1490cca17c3160700a0fbb7cd06807ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d51f32b1c2345538c0c6f582fcb022739c4a194ebb42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(stableCoin, deployer, zap, vault, weth, true);
  });

  it("zap out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyHopSolidlyOpDeployment);

    const zapInData =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a1000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000003115f77abfba35f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000012500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f00a0fbb7cd06009da11ff60bfc5af527f58fd61679c3ac98d040d90000000000000000000001000b2c639c533813f4aa9d7837caf62653d097ff857f5c764cbc14f9669b88837ca1490cca17c3160702a000000000000000000000000000000000000000000000000002abf5dee06f6036ee63c1e500766854992bd5363ebeeff0113f5a5795796befab7f5c764cbc14f9669b88837ca1490cca17c3160700a0fbb7cd06807ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d51f32b1c2345538c0c6f582fcb022739c4a194ebb42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(zapInData, stableCoin, deployer, zap, vault, weth);

    const zapOutData =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba00000000000000000000000042000000000000000000000000000000000000060000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d400000000000000000000000000000000000000000000000005ef1ea004000ce1000000000000000000000000000000000000000000000000000000001cd890080000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018100000000000000000000000000000000000000000000000000000000016300a007e5c0d200000000000000000000000000000000000000000000000000013f00004f02a0000000000000000000000000000000000000000000000000000000001cd76c3cee63c1e50185149247691df622eaf1a8bd0cafd40bc45154a94200000000000000000000000000000000000006512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd107f5c764cbc14f9669b88837ca1490cca17c3160700449908fc8b0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065771a96000000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, weth, zapOutData);
  });
});
