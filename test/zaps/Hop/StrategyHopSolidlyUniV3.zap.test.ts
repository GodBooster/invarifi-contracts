import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";

import { expect } from "chai";
import { beefIn, beefOut, beefOutAndSwap } from "./utils";
import { runNetworkDescribe } from "../../utils/optional-tests";
import { NetworkName } from "../../../hardhat.config";
import { optimismContracts } from "../../constants";
import { StrategyHopSolidlyUniV3OpDeployment } from "./deployment/StrategyHopSolidlyUniV3.deployment";

runNetworkDescribe("Strategy Hop Solidly zap uni V3 tests", NetworkName.OPTIMISM, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin, strategyHop } = await loadFixture(StrategyHopSolidlyUniV3OpDeployment);
    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1

    expect(stableCoin.address).eq(optimismContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(optimismContracts.oneInchRouter);
    expect(weth.address).eq(optimismContracts.tokens.WETH.token);
  });

  it("zap in test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyHopSolidlyUniV3OpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e58000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a1000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000001dcb4fb50000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022200000000000000000000000000000000000000000000000000000000020400a007e5c0d20000000000000000000000000000000000000000000000000001e00000f0512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd100b2c639c533813f4aa9d7837caf62653d097ff8500449908fc8b0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba00000000000000000000000000000000000000000000000000000000657722435120eaf1ac8e89ea0ae13e0f03634a4ff235025270247f5c764cbc14f9669b88837ca1490cca17c3160700447dc203820000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000001dcb4fb50000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000042f527f50f16a103b6ccab48bccca214500c10210000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  });

  it("zap out test", async () => {
    const { zap, weth, stableCoin, vault, deployer, usdt } = await loadFixture(StrategyHopSolidlyUniV3OpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e58000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a1000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000001dcb4fb50000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022200000000000000000000000000000000000000000000000000000000020400a007e5c0d20000000000000000000000000000000000000000000000000001e00000f0512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd100b2c639c533813f4aa9d7837caf62653d097ff8500449908fc8b0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba00000000000000000000000000000000000000000000000000000000657722435120eaf1ac8e89ea0ae13e0f03634a4ff235025270247f5c764cbc14f9669b88837ca1490cca17c3160700447dc203820000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000001dcb4fb50000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000042f527f50f16a103b6ccab48bccca214500c10210000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(usdt, deployer, zap, vault, weth);
  });

  it("zap out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyHopSolidlyUniV3OpDeployment);

    const zapInData =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e58000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a1000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000001dcb4fb50000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022200000000000000000000000000000000000000000000000000000000020400a007e5c0d20000000000000000000000000000000000000000000000000001e00000f0512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd100b2c639c533813f4aa9d7837caf62653d097ff8500449908fc8b0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba00000000000000000000000000000000000000000000000000000000657722435120eaf1ac8e89ea0ae13e0f03634a4ff235025270247f5c764cbc14f9669b88837ca1490cca17c3160700447dc203820000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000001dcb4fb50000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000042f527f50f16a103b6ccab48bccca214500c10210000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(zapInData, stableCoin, deployer, zap, vault, weth);

    const zapOutData =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba00000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d40000000000000000000000000000000000000000000000000000000038b5efaf000000000000000000000000000000000000000000000000000000001c5c23d2000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc0000000000000000000000000000000000000000000000000000000001de00a007e5c0d20000000000000000000000000000000000000000000001ba0000ca0000b051201337bedc9d22ecbe766df105c9623922a27963ec94b008aa00579c1307b0ef2c499ad98a8ce58e5800443df02124000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5bf52d0020d6bdbf787f5c764cbc14f9669b88837ca1490cca17c31607512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd107f5c764cbc14f9669b88837ca1490cca17c3160700449908fc8b0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000657724fe000000008b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, weth, zapOutData);
  });
});
