// eslint-disable-next-line node/no-missing-import
import { runNetworkDescribe } from "../../utils/optional-tests";
// eslint-disable-next-line node/no-missing-import
import { NetworkName } from "../../../hardhat.config";
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
// eslint-disable-next-line node/no-missing-import
import { optimismContracts } from "../../constants";
// eslint-disable-next-line node/no-missing-import
// eslint-disable-next-line node/no-missing-import
import { StrategyCommonVelodromeGaugeV2Deployment } from "./deployment/StrategyCommonVelodromeGaugeV2.deployment";
// eslint-disable-next-line node/no-missing-import
import { beefIn, beefOut, beefOutAndSwap } from "./utils";
// eslint-disable-next-line camelcase,node/no-missing-import
import { ERC20__factory } from "../../../typechain-types";

runNetworkDescribe("Strategy CommonVelodromeGaugeV2 zap tests", NetworkName.OPTIMISM, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin, strategyVelodrome } = await loadFixture(StrategyCommonVelodromeGaugeV2Deployment);

    expect(stableCoin.address).eq(optimismContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(optimismContracts.oneInchRouter);
    expect(weth.address).eq(optimismContracts.tokens.WETH.token);
  });

  it("zap in test", async () => {
    const { zap, weth, stableCoin, vault, deployer, strategyVelodrome } = await loadFixture(
      StrategyCommonVelodromeGaugeV2Deployment
    );

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000234d9063980391cf4440ca356ca46779ea06cb0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000002472f2c91eb3c770edc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055500000000000000000000000000000000000000000000000000000000053700a0c9e75c480000000000000000090100000000000000000000000000000000000000000000000000050900023200a007e5c0d200000000000000000000000000000000000000000000020e00009e00004f02a0000000000000000000000000000000000000000000000002b6339873ac1590b5ee63c1e501d28f71e383e93c570d3edfe82ebbceb35ec6c4120b2c639c533813f4aa9d7837caf62653d097ff8500a0fbb7cd06009da11ff60bfc5af527f58fd61679c3ac98d040d9000000000000000000000100da10009cbd5d07dd0cecc66161fc93d7c9000da17f5c764cbc14f9669b88837ca1490cca17c316075126a062ae8a9c5e11aaa026fc2670b0d65ccc8b28587f5c764cbc14f9669b88837ca1490cca17c316070004cac88ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a1a75e5cdbd79b97000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065772d8000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f1046053aa5682b4f9a81b5481394da16be5ff5a00a007e5c0d20000000000000000000000000000000000000000000000000002b300004f02a000000000000000000000000000000000000000000000000002c5c7036056c748ee63c1e5011fb3cf6e48f1e7b10213e7b6d87d4c073c7fdb7b0b2c639c533813f4aa9d7837caf62653d097ff8500a0c9e75c48000000000000001d14010000000000000000000000000000000000000000000002360001d300006302a000000000000000000000000000000000000000000000000a7c11e5f60a4b6864ee63c1e581bcfac19a0036ada56496316ee5cf388c2af2bf5842000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a9605825106a062ae8a9c5e11aaa026fc2670b0d65ccc8b285842000000000000000000000000000000000000060004cac88ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d18c6b71a9f0b38d9700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065772d80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000060000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f1046053aa5682b4f9a81b5481394da16be5ff5a02a00000000000000000000000000000000000000000000001310c39547d83fe5f70ee63c1e5810fb07e6d6e1f52c839608e1436d2ea810cf0725742000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  }).timeout(100_000);

  it("zap out test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyCommonVelodromeGaugeV2Deployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000234d9063980391cf4440ca356ca46779ea06cb0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000002472f2c91eb3c770edc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055500000000000000000000000000000000000000000000000000000000053700a0c9e75c480000000000000000090100000000000000000000000000000000000000000000000000050900023200a007e5c0d200000000000000000000000000000000000000000000020e00009e00004f02a0000000000000000000000000000000000000000000000002b6339873ac1590b5ee63c1e501d28f71e383e93c570d3edfe82ebbceb35ec6c4120b2c639c533813f4aa9d7837caf62653d097ff8500a0fbb7cd06009da11ff60bfc5af527f58fd61679c3ac98d040d9000000000000000000000100da10009cbd5d07dd0cecc66161fc93d7c9000da17f5c764cbc14f9669b88837ca1490cca17c316075126a062ae8a9c5e11aaa026fc2670b0d65ccc8b28587f5c764cbc14f9669b88837ca1490cca17c316070004cac88ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a1a75e5cdbd79b97000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065772d8000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f1046053aa5682b4f9a81b5481394da16be5ff5a00a007e5c0d20000000000000000000000000000000000000000000000000002b300004f02a000000000000000000000000000000000000000000000000002c5c7036056c748ee63c1e5011fb3cf6e48f1e7b10213e7b6d87d4c073c7fdb7b0b2c639c533813f4aa9d7837caf62653d097ff8500a0c9e75c48000000000000001d14010000000000000000000000000000000000000000000002360001d300006302a000000000000000000000000000000000000000000000000a7c11e5f60a4b6864ee63c1e581bcfac19a0036ada56496316ee5cf388c2af2bf5842000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a9605825106a062ae8a9c5e11aaa026fc2670b0d65ccc8b285842000000000000000000000000000000000000060004cac88ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d18c6b71a9f0b38d9700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065772d80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000060000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f1046053aa5682b4f9a81b5481394da16be5ff5a02a00000000000000000000000000000000000000000000001310c39547d83fe5f70ee63c1e5810fb07e6d6e1f52c839608e1436d2ea810cf0725742000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000008b1ccac8";

    // eslint-disable-next-line camelcase
    const tokenOut1 = ERC20__factory.connect("0x7f5c764cbc14f9669b88837ca1490cca17c31607", deployer);
    // eslint-disable-next-line camelcase
    const tokenOut2 = ERC20__factory.connect("0xc03b43d492d904406db2d7d57e67c7e8234ba752", deployer);

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(tokenOut1, tokenOut2, deployer, zap, vault, weth);
  });

  it("zap out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyCommonVelodromeGaugeV2Deployment);

    const zapInData =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000234d9063980391cf4440ca356ca46779ea06cb0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000002472f2c91eb3c770edc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055500000000000000000000000000000000000000000000000000000000053700a0c9e75c480000000000000000090100000000000000000000000000000000000000000000000000050900023200a007e5c0d200000000000000000000000000000000000000000000020e00009e00004f02a0000000000000000000000000000000000000000000000002b6339873ac1590b5ee63c1e501d28f71e383e93c570d3edfe82ebbceb35ec6c4120b2c639c533813f4aa9d7837caf62653d097ff8500a0fbb7cd06009da11ff60bfc5af527f58fd61679c3ac98d040d9000000000000000000000100da10009cbd5d07dd0cecc66161fc93d7c9000da17f5c764cbc14f9669b88837ca1490cca17c316075126a062ae8a9c5e11aaa026fc2670b0d65ccc8b28587f5c764cbc14f9669b88837ca1490cca17c316070004cac88ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a1a75e5cdbd79b97000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065772d8000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f1046053aa5682b4f9a81b5481394da16be5ff5a00a007e5c0d20000000000000000000000000000000000000000000000000002b300004f02a000000000000000000000000000000000000000000000000002c5c7036056c748ee63c1e5011fb3cf6e48f1e7b10213e7b6d87d4c073c7fdb7b0b2c639c533813f4aa9d7837caf62653d097ff8500a0c9e75c48000000000000001d14010000000000000000000000000000000000000000000002360001d300006302a000000000000000000000000000000000000000000000000a7c11e5f60a4b6864ee63c1e581bcfac19a0036ada56496316ee5cf388c2af2bf5842000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a9605825106a062ae8a9c5e11aaa026fc2670b0d65ccc8b285842000000000000000000000000000000000000060004cac88ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d18c6b71a9f0b38d9700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065772d80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000060000000000000000000000009560e827af36c94d2ac33a39bce1fe78631088db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f1046053aa5682b4f9a81b5481394da16be5ff5a02a00000000000000000000000000000000000000000000001310c39547d83fe5f70ee63c1e5810fb07e6d6e1f52c839608e1436d2ea810cf0725742000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000008b1ccac8";

    await beefIn(zapInData, stableCoin, deployer, zap, vault, weth);

    // eslint-disable-next-line camelcase
    const tokenOut1 = ERC20__factory.connect("0x7f5c764cbc14f9669b88837ca1490cca17c31607", deployer);
    // eslint-disable-next-line camelcase
    const tokenOut2 = ERC20__factory.connect("0xc03b43d492d904406db2d7d57e67c7e8234ba752", deployer);

    const zapOutData1 =
      "0xbc80f1a80000000000000000000000007de698721cf8505c26e6da3d7e91e2c5687e8e9f000000000000000000000000000000000000000000000000000000001cb2805c000000000000000000000000000000000000000000000000000000000e589922000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000018000000000000000000000002ab22ac86b25bd448a4d9dc041bd2384655299c48b1ccac8";

    const zapOutData2 =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba000000000000000000000000c03b43d492d904406db2d7d57e67c7e8234ba7520000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007de698721cf8505c26e6da3d7e91e2c5687e8e9f000000000000000000000000000000000000000000000000000000b26751502d000000000000000000000000000000000000000000000000000000000dba6915000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002150000000000000000000000000000000000000000000000000000000001f700a007e5c0d20000000000000000000000000000000000000000000000000001d30001705126a062ae8a9c5e11aaa026fc2670b0d65ccc8b2858c03b43d492d904406db2d7d57e67c7e8234ba7520004cac88ea90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dbb08f900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000000000000000000000000000000000065773a8e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c03b43d492d904406db2d7d57e67c7e8234ba7520000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f1046053aa5682b4f9a81b5481394da16be5ff5a02a0000000000000000000000000000000000000000000000000000000000dba6915ee63c1e5802ab22ac86b25bd448a4d9dc041bd2384655299c47f5c764cbc14f9669b88837ca1490cca17c316071111111254eeb25477b68fb85ed929f73a96058200000000000000000000008b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, tokenOut1, tokenOut2, zapOutData1, zapOutData2);
  }).timeout(100_000);
});
