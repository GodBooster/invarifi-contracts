import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { balancerContracts } from "../../Balancer.contracts";
import { StrategyCurveConvexDeployment } from "../deployment/StrategyCurveConvex.deployment";
import { beefIn, beefOut, beefOutAndSwap } from "./utils";
describe("StrategyCurveConvex zap tests", () => {
  it("deployment test", async () => {
    const { zap, weth, stableCoin } = await loadFixture(StrategyCurveConvexDeployment);

    console.log(zap.address);

    expect(stableCoin.address).eq(balancerContracts.LIDO);
    expect(await zap.oneInchRouter()).eq(balancerContracts.oneInchRouter);
    expect(weth.address).eq(balancerContracts.WETH);
  });

  it("beef in test", async () => {
    const data =
      "0xf78dc25300000000000000000000000026bb24f70a12b2e05617f764308d4898a8b73f490000000000000000000000005a98fcbea516cf06857215779fd812ca3bef1b320000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000b694e6e182d92a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340c558f600b34a5f69dd2f0d06cb8a88d829b7420a8b1ccac8";

    const { zap, stableCoin, deployer, vault, weth } = await loadFixture(StrategyCurveConvexDeployment);

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  }).timeout(100_000);

  it("beef out test", async () => {
    const data =
      "0xf78dc25300000000000000000000000026bb24f70a12b2e05617f764308d4898a8b73f490000000000000000000000005a98fcbea516cf06857215779fd812ca3bef1b320000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000b694e6e182d92a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340c558f600b34a5f69dd2f0d06cb8a88d829b7420a8b1ccac8";

    const { zap, stableCoin, deployer, vault, weth } = await loadFixture(StrategyCurveConvexDeployment);

    await beefIn(data, stableCoin, deployer, zap, vault, weth);

    await beefOut(stableCoin, deployer, zap, vault, weth);
  });

  it("beef out and swap test", async () => {
    const data =
      "0xf78dc25300000000000000000000000026bb24f70a12b2e05617f764308d4898a8b73f490000000000000000000000005a98fcbea516cf06857215779fd812ca3bef1b320000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000b694e6e182d92a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340c558f600b34a5f69dd2f0d06cb8a88d829b7420a8b1ccac8";

    const { zap, stableCoin, deployer, vault, weth } = await loadFixture(StrategyCurveConvexDeployment);

    await beefIn(data, stableCoin, deployer, zap, vault, weth);

    const newData =
      "0xf78dc253000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d4000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000018e5d7c51d60bc7000000000000000000000000000000000000000000000002b3961ce92449c42900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340454f11d58e27858926d7a4ece8bfea2c33e97b138b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, weth, newData);
  }).timeout(100_000);
});
