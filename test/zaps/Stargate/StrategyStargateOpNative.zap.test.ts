import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { StrategyStargateOpNativeDeployment } from "./deployment/StrategyStargateOpNative.deployment";
import { optimismContracts } from "../../constants";
import { beefIn, beefOut, beefOutAndSwap } from "./utilsOp";
import { runNetworkDescribe } from "../../utils/optional-tests";
import { NetworkName } from "../../../hardhat.config";

runNetworkDescribe("StrategyStargateOpNative zap tests", NetworkName.OPTIMISM, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin, strategyStargateOp } = await loadFixture(StrategyStargateOpNativeDeployment);

    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1

    console.log(await strategyStargateOp.deposit());

    expect(stableCoin.address).eq(optimismContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(optimismContracts.oneInchRouter);
    expect(weth.address).eq(optimismContracts.tokens.WETH.token);
  });

  it("beef in test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateOpNativeDeployment);

    // src - token in, dst - token out, from - my address, slippage - 50, receiver, zap address

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000004fe1195204d9b20000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000012500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f02a00000000000000000000000000000000000000000000000000000000002facdb3ee63c1e5012ab22ac86b25bd448a4d9dc041bd2384655299c40b2c639c533813f4aa9d7837caf62653d097ff8502a0000000000000000000000000000000000000000000000000004599f2f05ca8abee63c1e500766854992bd5363ebeeff0113f5a5795796befab7f5c764cbc14f9669b88837ca1490cca17c3160700a0fbb7cd06807ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d51f32b1c2345538c0c6f582fcb022739c4a194ebb42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  });

  it("beef out test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateOpNativeDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000004fe1195204d9b20000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000012500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f02a00000000000000000000000000000000000000000000000000000000002facdb3ee63c1e5012ab22ac86b25bd448a4d9dc041bd2384655299c40b2c639c533813f4aa9d7837caf62653d097ff8502a0000000000000000000000000000000000000000000000000004599f2f05ca8abee63c1e500766854992bd5363ebeeff0113f5a5795796befab7f5c764cbc14f9669b88837ca1490cca17c3160700a0fbb7cd06807ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d51f32b1c2345538c0c6f582fcb022739c4a194ebb42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(stableCoin, deployer, zap, vault, weth, true);
  });

  it("beef out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateOpNativeDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000004fe1195204d9b20000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000012500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f02a00000000000000000000000000000000000000000000000000000000002facdb3ee63c1e5012ab22ac86b25bd448a4d9dc041bd2384655299c40b2c639c533813f4aa9d7837caf62653d097ff8502a0000000000000000000000000000000000000000000000000004599f2f05ca8abee63c1e500766854992bd5363ebeeff0113f5a5795796befab7f5c764cbc14f9669b88837ca1490cca17c3160700a0fbb7cd06807ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d51f32b1c2345538c0c6f582fcb022739c4a194ebb42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);

    // src - lp token from, dst - want token, amount balance of user in vault, from - zap address
    const newData =
      "0xbc80f1a8000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d400000000000000000000000000000000000000000000000000a01d9710d755250000000000000000000000000000000000000000000000000000000002f9d2b8000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000018000000000000000000000001fb3cf6e48f1e7b10213e7b6d87d4c073c7fdb7b8b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, weth, newData);
  });
});
