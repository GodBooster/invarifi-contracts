import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { optimismContracts } from "../../constants";
import { beefIn, beefOut, beefOutAndSwap } from "./utilsOp";
import { StrategyStargateSolidlyOpDeployment } from "./deployment/StrategyStargateSolidlyOp.deployment";
import { runNetworkDescribe } from "../../utils/optional-tests";
import { NetworkName } from "../../../hardhat.config";

runNetworkDescribe("StrategyStargateOpSolidly zap tests", NetworkName.OPTIMISM, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin, strategyStargateSolidly } = await loadFixture(StrategyStargateSolidlyOpDeployment);

    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1

    // console.log(await strategyStargateSolidly.deposit());

    expect(stableCoin.address).eq(optimismContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(optimismContracts.oneInchRouter);
    expect(weth.address).eq(optimismContracts.tokens.WETH.token);
  });

  it("beef in test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateSolidlyOpDeployment);

    // src - token in, dst - token out, from - my address, slippage - 50, receiver, zap address

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000002b64c990c548d547f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008100000000000000000000000000000000000000000000000000000000006300a0fbb7cd06809da11ff60bfc5af527f58fd61679c3ac98d040d90000000000000000000001000b2c639c533813f4aa9d7837caf62653d097ff85da10009cbd5d07dd0cecc66161fc93d7c9000da11111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  });
  it("beef out test", async () => {
    const { zap, weth, stableCoin, vault, deployer, dai } = await loadFixture(StrategyStargateSolidlyOpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000002b64c990c548d547f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008100000000000000000000000000000000000000000000000000000000006300a0fbb7cd06809da11ff60bfc5af527f58fd61679c3ac98d040d90000000000000000000001000b2c639c533813f4aa9d7837caf62653d097ff85da10009cbd5d07dd0cecc66161fc93d7c9000da11111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(dai, deployer, zap, vault, weth, false);
  });

  it("beef out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateSolidlyOpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000002b64c990c548d547f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008100000000000000000000000000000000000000000000000000000000006300a0fbb7cd06809da11ff60bfc5af527f58fd61679c3ac98d040d90000000000000000000001000b2c639c533813f4aa9d7837caf62653d097ff85da10009cbd5d07dd0cecc66161fc93d7c9000da11111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);

    // src - lp token from, dst - want token, amount balance of user in vault, from - zap address
    const newData =
      "0xbc80f1a8000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d40000000000000000000000000000000000000000000000056c5893f448f790000000000000000000000000000000000000000000000000000000000002fabaf7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000028000000000000000000000009438a9d1bdeece02ed4431ac59613a128201e0b980000000000000000000000006f6928553a2952befe48dbe344cfbc663b808708b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, weth, newData);
  });
});
