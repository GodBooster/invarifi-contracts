import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { optimismContracts } from "../../constants";
import { beefIn, beefOut, beefOutAndSwap } from "./utilsOp";
import { StrategyStargateOpDeployment } from "./deployment/StrategyStargateOp.deployment";
import { runNetworkDescribe } from "../../utils/optional-tests";
import { NetworkName } from "../../../hardhat.config";


runNetworkDescribe("StrategyStargateOp zap tests", NetworkName.OPTIMISM, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin, strategyStargateOp } = await loadFixture(StrategyStargateOpDeployment);

    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1
    // фром 0x610AcfD59bEf98F34740b780b81D04079ac732D4
    console.log(await strategyStargateOp.deposit());

    expect(stableCoin.address).eq(optimismContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(optimismContracts.oneInchRouter);
    expect(weth.address).eq(optimismContracts.tokens.WETH.token);
  });

  it("beef in test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateOpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000002fb37dc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018100000000000000000000000000000000000000000000000000000000016300a007e5c0d200000000000000000000000000000000000000000000000000013f00004f02a00000000000000000000000000000000000000000000000000000000002fb4904ee63c1e501a73c628eaf6e283e26a7b1f8001cf186aa4c0e8e0b2c639c533813f4aa9d7837caf62653d097ff85512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd1094b008aa00579c1307b0ef2c499ad98a8ce58e5800449908fc8b00000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065760f3e000000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  });

  it("beef out test", async () => {
    const { zap, weth, stableCoin, vault, deployer, tokenOut } = await loadFixture(StrategyStargateOpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000002fb37dc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018100000000000000000000000000000000000000000000000000000000016300a007e5c0d200000000000000000000000000000000000000000000000000013f00004f02a00000000000000000000000000000000000000000000000000000000002fb4904ee63c1e501a73c628eaf6e283e26a7b1f8001cf186aa4c0e8e0b2c639c533813f4aa9d7837caf62653d097ff85512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd1094b008aa00579c1307b0ef2c499ad98a8ce58e5800449908fc8b00000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065760f3e000000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(tokenOut, deployer, zap, vault, weth);
  });

  it("beef out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateOpDeployment);

    const data =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007dd675f6bb90d4857d2bfd19816bac13e22be7a10000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000002fb37dc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018100000000000000000000000000000000000000000000000000000000016300a007e5c0d200000000000000000000000000000000000000000000000000013f00004f02a00000000000000000000000000000000000000000000000000000000002fb4904ee63c1e501a73c628eaf6e283e26a7b1f8001cf186aa4c0e8e0b2c639c533813f4aa9d7837caf62653d097ff85512050a39b94b1dc8472faa08c36a3ef5b0a01c5bd1094b008aa00579c1307b0ef2c499ad98a8ce58e5800449908fc8b00000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000065760f3e000000000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);

    const newData =
      "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d40000000000000000000000000000000000000000000000000000000005ef50660000000000000000000000000000000000000000000000000000000002f7ae5d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000012500a007e5c0d200000000000000000000000000000000000000000000010100009e00004f00a0fbb7cd06009da11ff60bfc5af527f58fd61679c3ac98d040d90000000000000000000001007f5c764cbc14f9669b88837ca1490cca17c31607da10009cbd5d07dd0cecc66161fc93d7c9000da102a0000000000000000000000000000000000000000000000002b3175ecd019cf427ee63c1e5009438a9d1bdeece02ed4431ac59613a128201e0b9da10009cbd5d07dd0cecc66161fc93d7c9000da102a00000000000000000000000000000000000000000000000000000000002f7ae5dee63c1e58006f6928553a2952befe48dbe344cfbc663b808708c6f28f2f1a3c87f0f938b96d27520d9751ec8d91111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000008b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, weth, newData);
  });
});
