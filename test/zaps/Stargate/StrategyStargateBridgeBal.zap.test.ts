import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { avalancheContracts, baseContracts, optimismContracts } from "../../constants";
import { beefIn, beefOut, beefOutAndSwap } from "./utilsOp";
import { StrategyStargateSolidlyOpDeployment } from "./deployment/StrategyStargateSolidlyOp.deployment";
import { runNetworkDescribe } from "../../utils/optional-tests";
import { NetworkName } from "../../../hardhat.config";
import { StrategyStargateStakingDeployment } from "./deployment/StrategyStargateStaking.deployment";
import { StrategyStargateBridgeBalDeployment } from "./deployment/StrategyStargateBridgeBal.deployment";

runNetworkDescribe("StrategyStargateBridgeBal zap tests", NetworkName.BASE, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin, strategyStargateSolidly } = await loadFixture(StrategyStargateBridgeBalDeployment);

    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1

    // console.log(await strategyStargateSolidly.deposit());

    expect(stableCoin.address).eq(baseContracts.tokens.USDbC.token);
    expect(await zap.oneInchRouter()).eq(baseContracts.oneInchRouter);
    expect(weth.address).eq(baseContracts.tokens.WETH.token);
  });

  it("beef in test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateBridgeBalDeployment);

    // src - token in, dst - token out, from - my address, slippage - 50, receiver, zap address

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a58810000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000004b8d52614b8d95000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001120000000000000000000000000000000000000000000000000000000000f400a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000000c600006302a0000000000000000000000000000000000000000000000000000183ac8907bd14ee63c1e5803b8000cd10625abdc7370fb47ed4d4a9c6311fd5d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058202a0000000000000000000000000000000000000000000000000004a09a5d843d081ee63c1e580e58b73ff901325b8b2056b29712c50237242f520d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  });
  it("beef out test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateBridgeBalDeployment);

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a58810000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000004b8d52614b8d95000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001120000000000000000000000000000000000000000000000000000000000f400a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000000c600006302a0000000000000000000000000000000000000000000000000000183ac8907bd14ee63c1e5803b8000cd10625abdc7370fb47ed4d4a9c6311fd5d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058202a0000000000000000000000000000000000000000000000000004a09a5d843d081ee63c1e580e58b73ff901325b8b2056b29712c50237242f520d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(weth, deployer, zap, vault, weth, true);
  });

  it("beef out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyStargateBridgeBalDeployment);

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a58810000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000004b8d52614b8d95000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001120000000000000000000000000000000000000000000000000000000000f400a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000000c600006302a0000000000000000000000000000000000000000000000000000183ac8907bd14ee63c1e5803b8000cd10625abdc7370fb47ed4d4a9c6311fd5d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058202a0000000000000000000000000000000000000000000000000004a09a5d843d081ee63c1e580e58b73ff901325b8b2056b29712c50237242f520d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);

    // src - lp token from, dst - want token, amount balance of user in vault, from - zap address
    const newData =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000004200000000000000000000000000000000000006000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d4000000000000000000000000000000000000000000000000009617b4a676cc050000000000000000000000000000000000000000000000000000000002f5315b000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a700000000000000000000000000000000000000000000000000000000068900a0c9e75c480000000000000000070300000000000000000000000000000000000000000000000000065b00028400a007e5c0d2000000000000000000000000000000000000000000000000000260000130512001538aa697ce8cc8252c70c41452dae86ce22a3e420000000000000000000000000000000000000600a4a5dcbcdf000000000000000000000000420000000000000000000000000000000000000600000000000000000000000050c5725949a6f0c72e6c4a641f24049a917db0cb0000000000000000000000005bdb08ae195c8f085704582a27d566028a719265000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000512001538aa697ce8cc8252c70c41452dae86ce22a3e50c5725949a6f0c72e6c4a641f24049a917db0cb00a4a5dcbcdf00000000000000000000000050c5725949a6f0c72e6c4a641f24049a917db0cb000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000dcc8a6ba71a6c0053cbb32f935e9b4b64d465ea30000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0c9e75c480000000000190d0a01010000000000000000000000000000000003a90003460002e30001b30001505106e11b93b61f6291d35c5a2bea0a9ff169080160cf42000000000000000000000000000000000000060004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a9df000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000006579b5e200000000000000000000000000000000000000000000000000000000000000010000000000000000000000004200000000000000000000000000000000000006000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000a9d54ee63c1e5a166543ab7d0ac497ee5ff77e8c5965efcdb895f7f42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a960582510001538aa697ce8cc8252c70c41452dae86ce22a3e420000000000000000000000000000000000000600a4a5dcbcdf0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca00000000000000000000000006e6736ca9e922766279a22b75a600fe8b8473b60000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000089d0d5ee63c1e581f6c0a374a483101e04ef5f7ac9bd15d9142bac9542000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a0000000000000000000000000000000000000000000000000000000000108fa85ee63c1e58122ca6d83ab887a535ae1c6011cc36ea9d1255c3142000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000008b1ccac8";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, weth, newData);
  });
});
