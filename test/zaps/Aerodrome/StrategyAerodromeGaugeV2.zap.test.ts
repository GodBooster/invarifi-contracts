import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { baseContracts } from "../../constants";
import { runNetworkDescribe } from "../../utils/optional-tests";
import { NetworkName } from "../../../hardhat.config";
import { StrategyStargateStakingDeployment } from "./deployment/StrategyStargateStaking.deployment";
import { StrategyAerodromeDeployment } from "./deployment/StrategyAerodromeGaugeV2.deployment";
import { beefIn, beefOut, beefOutAndSwap } from "./utils";

runNetworkDescribe("StrategyAerodromeGaugeV2 zap tests", NetworkName.BASE, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stableCoin } = await loadFixture(StrategyAerodromeDeployment);

    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1
    // User address 0x610AcfD59bEf98F34740b780b81D04079ac732D4
    // console.log(await strategyStargateSolidly.deposit());

    expect(stableCoin.address).eq(baseContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(baseContracts.oneInchRouter);
    expect(weth.address).eq(baseContracts.tokens.WETH.token);
  });

  it("beef in test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyAerodromeDeployment);
    console.log("ZAP ADDRESS", zap.address); // 0x7DD675F6BB90d4857d2BFd19816bAC13e22bE7A1

    // src - token STABLE, dst - token 0x940181a94a35a4569e4529a3cdfb74e38fd98631 WANT, from - my address, slippage - 50, receiver - zap address

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000940181a94a35a4569e4529a3cdfb74e38fd98631000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a5881000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000002bbc3d4bc652766d9210000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018e0000000000000000000000000000000000000000000000000000000001705126cf77a3ba9a5ca399b7c97c74d54e5b1beb874e43d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0004cac88ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bbc3d4bc652766d92100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000657cee560000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000940181a94a35a4569e4529a3cdfb74e38fd986310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000420dd381b31aef6683db6b902084cb0ffece40da0000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
  }).timeout(100_000);
  it("beef out test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyAerodromeDeployment);

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000940181a94a35a4569e4529a3cdfb74e38fd98631000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a5881000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000002bbc3d4bc652766d9210000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018e0000000000000000000000000000000000000000000000000000000001705126cf77a3ba9a5ca399b7c97c74d54e5b1beb874e43d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0004cac88ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bbc3d4bc652766d92100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000657cee560000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000940181a94a35a4569e4529a3cdfb74e38fd986310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000420dd381b31aef6683db6b902084cb0ffece40da0000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);
    await beefOut(stableCoin, weth, deployer, zap, vault, weth, true);
  });

  it("beef out and swap test", async () => {
    const { zap, weth, stableCoin, vault, deployer } = await loadFixture(StrategyAerodromeDeployment);

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000940181a94a35a4569e4529a3cdfb74e38fd98631000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a5881000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000002bbc3d4bc652766d9210000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018e0000000000000000000000000000000000000000000000000000000001705126cf77a3ba9a5ca399b7c97c74d54e5b1beb874e43d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0004cac88ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bbc3d4bc652766d92100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000657cee560000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000940181a94a35a4569e4529a3cdfb74e38fd986310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000420dd381b31aef6683db6b902084cb0ffece40da0000000000000000000000000000000000008b1ccac8";

    await beefIn(data, stableCoin, deployer, zap, vault, weth);

    // src - lp token from, dst - want token, amount balance of user in vault, from - zap address
    const data1 =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000004200000000000000000000000000000000000006000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d400000000000000000000000000000000000000000000000002dedb5a86aae7c1000000000000000000000000000000000000000000000000000000000ddcdc170000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010e0000000000000000000000000000000000000000000000000000000000f0512027425e9fb6a9a625e8484cfd9620851d1fa322e5420000000000000000000000000000000000000600447dc203820000000000000000000000004200000000000000000000000000000000000006000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000ddcdc170000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000042f527f50f16a103b6ccab48bccca214500c10210000000000000000000000000000000000008b1ccac8";
    const data2 = "0x";

    await beefOutAndSwap(vault, deployer, zap, stableCoin, stableCoin, stableCoin, data1, data2);
  });
});
