import { runNetworkDescribe } from "../../../utils/optional-tests";
import { NetworkName } from "../../../../hardhat.config";
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { baseContracts } from "../../../constants";
import { beefIn, beefOut, beefOutAndSwap } from "./utils";
import { StrategyBalancerMultiRewardDeployment } from "../deployment/StrategyBalancerMultiReward.deployment";
import { IERC20__factory } from "../../../../typechain-types/factories/contracts/infra/FlatZap.sol";

runNetworkDescribe("StrategyBalancerMultiReward zap tests", NetworkName.BASE, false, async () => {
  it("deployment", async () => {
    const { zap, weth, usdc } = await loadFixture(StrategyBalancerMultiRewardDeployment);

    expect(usdc.address).eq(baseContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(baseContracts.oneInchRouter);
    expect(weth.address).eq(baseContracts.tokens.WETH.token);
  });

  it("zap in test", async () => {
    const { zap, weth, usdc, vault, deployer } = await loadFixture(StrategyBalancerMultiRewardDeployment);
    console.log({ zap: zap.address });
    console.log({ deployer: deployer.address });

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a5881000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000031d9a82d53dfe600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013e00000000000000000000000000000000000000000000000000000000012000a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000000f200008f0c20d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca86cd030822547105bd7952af4ba48534640a38246ae4071138002dc6c086cd030822547105bd7952af4ba48534640a38241111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000ff50f08400dafd9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca02a0000000000000000000000000000000000000000000000000030da573ccfdf0b0ee63c1e5804c36388be6f416a29c8d8eee81c771ce6be14b18d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058200008b1ccac8";

    await beefIn(data, usdc, deployer, zap, vault, weth);
  }).timeout(100_000);

  it("zap out test", async () => {
    const { zap, weth, usdc, vault, deployer } = await loadFixture(StrategyBalancerMultiRewardDeployment);

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a5881000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000031d9a82d53dfe600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013e00000000000000000000000000000000000000000000000000000000012000a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000000f200008f0c20d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca86cd030822547105bd7952af4ba48534640a38246ae4071138002dc6c086cd030822547105bd7952af4ba48534640a38241111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000ff50f08400dafd9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca02a0000000000000000000000000000000000000000000000000030da573ccfdf0b0ee63c1e5804c36388be6f416a29c8d8eee81c771ce6be14b18d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058200008b1ccac8";

    await beefIn(data, usdc, deployer, zap, vault, weth);
    // eslint-disable-next-line camelcase
    const tokenOut = IERC20__factory.connect("0xB6fe221Fe9EeF5aBa221c348bA20A1Bf5e73624c", deployer);

    await beefOut(vault, deployer, zap, tokenOut, 1);
  }).timeout(100_000);

  it("zap out and swap test", async () => {
    const { zap, weth, usdc, vault, deployer } = await loadFixture(StrategyBalancerMultiRewardDeployment);

    const zapInData =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a5881000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000031d9a82d53dfe600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013e00000000000000000000000000000000000000000000000000000000012000a0c9e75c48000000000000000031010000000000000000000000000000000000000000000000000000f200008f0c20d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca86cd030822547105bd7952af4ba48534640a38246ae4071138002dc6c086cd030822547105bd7952af4ba48534640a38241111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000ff50f08400dafd9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca02a0000000000000000000000000000000000000000000000000030da573ccfdf0b0ee63c1e5804c36388be6f416a29c8d8eee81c771ce6be14b18d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca1111111254eeb25477b68fb85ed929f73a96058200008b1ccac8";

    await beefIn(zapInData, usdc, deployer, zap, vault, weth);

    const zapOutData =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000b6fe221fe9eef5aba221c348ba20a1bf5e73624c000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d400000000000000000000000000000000000000000000000002ca2e38385c2406000000000000000000000000000000000000000000000000000000000e97e05e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046d00000000000000000000000000000000000000000000000000000000044f00a007e5c0d200000000000000000000000000000000000000000000000000042b00004f00a0fbb7cd0600c771c1a5905420daec317b154eb13e4198ba97d0000000000000000000000023b6fe221fe9eef5aba221c348ba20a1bf5e73624c420000000000000000000000000000000000000600a0c9e75c48000000130f08030202010000000000000000000003ae00034b0002e80002850002220001bf00008f0c204200000000000000000000000000000000000006ef24722d5dae32dc155d961561cffbc5f347eee76ae40711b800186a00ef24722d5dae32dc155d961561cffbc5f347eee71111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000000000004aba854200000000000000000000000000000000000006510001538aa697ce8cc8252c70c41452dae86ce22a3e420000000000000000000000000000000000000600a4a5dcbcdf0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca00000000000000000000000006e6736ca9e922766279a22b75a600fe8b8473b60000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000957509ee63c1e5813b8000cd10625abdc7370fb47ed4d4a9c6311fd542000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a00000000000000000000000000000000000000000000000000000000000e02e29ee63c1e581f6c0a374a483101e04ef5f7ac9bd15d9142bac9542000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a0000000000000000000000000000000000000000000000000000000000255c815ee63c1e58117d7b7bd4fc771555d8cccfe90d2efcf3c7106dd42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a0000000000000000000000000000000000000000000000000000000000460b76eee63c1e581e0712c087ecb8a0dd20914626152ebf4890708c242000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a000000000000000000000000000000000000000000000000000000000058b8ffeee63c1e5814c36388be6f416a29c8d8eee81c771ce6be14b1842000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000008b1ccac8";

    // eslint-disable-next-line camelcase
    const tokenOut = IERC20__factory.connect("0xB6fe221Fe9EeF5aBa221c348bA20A1Bf5e73624c", deployer);

    await beefOutAndSwap(vault, deployer, zap, usdc, tokenOut, 1, zapOutData);
  }).timeout(100_000);
});
