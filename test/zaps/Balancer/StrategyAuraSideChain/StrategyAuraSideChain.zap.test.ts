import { runNetworkDescribe } from "../../../utils/optional-tests";
import { NetworkName } from "../../../../hardhat.config";
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { arbitrumContracts } from "../../../constants";
import { StrategyAuraSideChainDeployment } from "../deployment/StrategyAuraSideChain.deployment";
import { beefIn, beefOut, beefOutAndSwap } from "./utils";
import { IERC20__factory } from "../../../../typechain-types";

runNetworkDescribe("StrategyAuraSideChain zap tests", NetworkName.ARBITRUM, false, async () => {
  it("deployment", async () => {
    const { zap, weth, stable } = await loadFixture(StrategyAuraSideChainDeployment);

    expect(stable.address).eq(arbitrumContracts.tokens.USDC.token);
    expect(await zap.oneInchRouter()).eq(arbitrumContracts.oneInchRouter);
    expect(weth.address).eq(arbitrumContracts.tokens.WETH.token);
  });

  it("zap in test", async () => {
    const { zap, weth, stable, vault, deployer } = await loadFixture(StrategyAuraSideChainDeployment);
    console.log({ zap: zap.address });
    console.log({ deployer: deployer.address });

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000000234d9063980391cf4440ca356ca46779ea06cb0000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000031196091c6044ac000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f40000000000000000000000000000000000000000000000000000000000d600a007e5c0d20000000000000000000000000000000000000000000000000000b200004f00a0fbb7cd0600b6911f80b1122f41c19b299a69dca07100452bf90002000000000000000004baaf88d065e77c8cc2239327c5edb3a432268e5831fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb902a0000000000000000000000000000000000000000000000000031196091c6044acee63c1e5800bacc7a9717e70ea0da5ac075889bd87d4c81197fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb91111111254eeb25477b68fb85ed929f73a9605820000000000000000000000008b1ccac8";

    await beefIn(data, stable, deployer, zap, vault, weth);
  }).timeout(100_000);

  it("zap out test", async () => {
    const { zap, weth, stable, vault, deployer } = await loadFixture(StrategyAuraSideChainDeployment);

    const data =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000000234d9063980391cf4440ca356ca46779ea06cb0000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000031196091c6044ac000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f40000000000000000000000000000000000000000000000000000000000d600a007e5c0d20000000000000000000000000000000000000000000000000000b200004f00a0fbb7cd0600b6911f80b1122f41c19b299a69dca07100452bf90002000000000000000004baaf88d065e77c8cc2239327c5edb3a432268e5831fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb902a0000000000000000000000000000000000000000000000000031196091c6044acee63c1e5800bacc7a9717e70ea0da5ac075889bd87d4c81197fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb91111111254eeb25477b68fb85ed929f73a9605820000000000000000000000008b1ccac8";

    await beefIn(data, stable, deployer, zap, vault, weth);
    // eslint-disable-next-line camelcase
    const tokenOut = IERC20__factory.connect("0xec70dcb4a1efa46b8f2d97c310c9c4790ba5ffa8", deployer);

    await beefOut(vault, deployer, zap, tokenOut, 2);
  }).timeout(100_000);

  it("zap out and swap test", async () => {
    const { zap, weth, stable, vault, deployer } = await loadFixture(StrategyAuraSideChainDeployment);

    const zapInData =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000000234d9063980391cf4440ca356ca46779ea06cb0000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000031196091c6044ac000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f40000000000000000000000000000000000000000000000000000000000d600a007e5c0d20000000000000000000000000000000000000000000000000000b200004f00a0fbb7cd0600b6911f80b1122f41c19b299a69dca07100452bf90002000000000000000004baaf88d065e77c8cc2239327c5edb3a432268e5831fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb902a0000000000000000000000000000000000000000000000000031196091c6044acee63c1e5800bacc7a9717e70ea0da5ac075889bd87d4c81197fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb91111111254eeb25477b68fb85ed929f73a9605820000000000000000000000008b1ccac8";

    await beefIn(zapInData, stable, deployer, zap, vault, weth);

    const zapOutData =
      "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000ec70dcb4a1efa46b8f2d97c310c9c4790ba5ffa8000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000007de698721cf8505c26e6da3d7e91e2c5687e8e9f0000000000000000000000000000000000000000000000000602696459c86d81000000000000000000000000000000000000000000000000000000001f8021560000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014c00000000000000000000000000000000000000000000000000000000012e00a007e5c0d200000000000000000000000000000000000000000000000000010a0000a700a0bd46a343024a2f6ae7f3e5d715689530873ec35593dc28951b0000000000000000000004819791d590788598535278552eecd4b211bfc790cb000000000000000000000498000000000000000000000000ec70dcb4a1efa46b8f2d97c310c9c4790ba5ffa80000000000000000000000005979d7b546e38e414f7e9822514be443a480052900000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab102a0000000000000000000000000000000000000000000000000000000001f802156ee63c1e581d9e2a1a61b6e61b275cec326465d417e52c1b95c82af49447d8a07e3bd95bd0d56f35241523fbab11111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000008b1ccac8";

    // eslint-disable-next-line camelcase
    const tokenOut = IERC20__factory.connect("0xec70dcb4a1efa46b8f2d97c310c9c4790ba5ffa8", deployer);
    await beefOutAndSwap(vault, deployer, zap, stable, tokenOut, 2, zapOutData);
  }).timeout(100_000);
});
