import { ethers } from "hardhat";
import { VaultV7, CommonZapOneInch, ERC20, IWETH } from "../../../typechain-types";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { parseUnits } from "ethers/lib/utils";
import { expect } from "chai";

export const beefIn = async (
  stableCoin: ERC20,
  deployer: SignerWithAddress,
  zap: CommonZapOneInch,
  vault: VaultV7,
  weth: IWETH,
  cbETH: ERC20
) => {
  const encodedData = ethers.utils.defaultAbiCoder.encode(
    [
      {
        type: "tuple",
        components: [
          // @ts-ignore
          { name: "inputToken", type: "bytes" },
          // @ts-ignore
          { name: "recipient", type: "address" },
        ],
      },
    ],
    [
      {
        inputToken:
          "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000004200000000000000000000000000000000000006000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd0900000000000000000000000032759192db6da43dfd8766a1588d7a40803a5881000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000032b4ba9008a394c000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001120000000000000000000000000000000000000000000000000000000000f400a0c9e75c4800000000000000002b070000000000000000000000000000000000000000000000000000c600006302a0000000000000000000000000000000000000000000000000007194762889a94eee63c1e580b775272e537cc670c65dc852908ad47015244eaf833589fcd6edb6e08f4c7c32d4f71b54bda029131111111254eeb25477b68fb85ed929f73a96058202a000000000000000000000000000000000000000000000000002b9b732d8008ffeee63c1e580d0b53d9277642d899df5c87a3966a349a798f224833589fcd6edb6e08f4c7c32d4f71b54bda029131111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000007e096b23",
        recipient: deployer.address,
      },
    ]
  );
  const amount = parseUnits("1000", await stableCoin.decimals());
  await stableCoin.connect(deployer).approve(zap.address, amount);
  expect(await weth.balanceOf(zap.address)).eq(0);
  expect(await cbETH.balanceOf(zap.address)).eq(0);
  expect(await vault.balanceOf(deployer.address)).eq(0);
  expect(await vault.balanceOf(zap.address)).eq(0);
  expect(await stableCoin.balanceOf(zap.address)).eq(0);

  await zap.connect(deployer).beefIn(vault.address, stableCoin.address, amount, 0, encodedData);

  console.log({ balance: (await vault.balanceOf(deployer.address)).toString() });
  expect(await weth.balanceOf(zap.address)).eq(0);
  expect(await cbETH.balanceOf(zap.address)).eq(0);
  expect(await vault.balanceOf(deployer.address)).gt(0);
  expect(await vault.balanceOf(zap.address)).eq(0);
  expect(await stableCoin.balanceOf(zap.address)).eq(0);
};

export const beefOut = async (
  deployer: SignerWithAddress,
  zap: CommonZapOneInch,
  vault: VaultV7,
  weth: IWETH,
  cbETH: ERC20
) => {
  const encodedData = ethers.utils.defaultAbiCoder.encode(
    [
      {
        type: "tuple",
        components: [
          // @ts-ignore
          { name: "inputToken0", type: "bytes" },
          // @ts-ignore
          { name: "inputToken1", type: "bytes" },
        ],
      },
    ],
    [
      {
        inputToken0: "0x00",
        inputToken1: "0x00",
      },
    ]
  );

  const withdrawAmount = await vault.balanceOf(deployer.address);

  await vault.connect(deployer).approve(zap.address, withdrawAmount);

  const balanceBefore = await ethers.provider.getBalance(deployer.address);
  const cbEthBalanceBefore = await cbETH.balanceOf(deployer.address);
  console.log("[ETH] Balance before:", balanceBefore.toString());
  console.log("[cbETH] Balance before:", cbEthBalanceBefore.toString());

  expect(withdrawAmount).gt(0);
  expect(await vault.balanceOf(zap.address)).eq(0);
  expect(await weth.balanceOf(zap.address)).eq(0);

  await zap.connect(deployer).beefOut(vault.address, withdrawAmount, 5, encodedData);

  const balanceAfter = await ethers.provider.getBalance(deployer.address);
  const cbEthBalanceAfter = await cbETH.balanceOf(deployer.address);
  console.log("[ETH] Balance after:", balanceAfter.toString());
  console.log("[cbETH] Balance after:", cbEthBalanceAfter.toString());

  expect(balanceAfter.sub(balanceBefore)).gt(0);
  expect(await vault.balanceOf(deployer.address)).eq(0);
  expect(await vault.balanceOf(zap.address)).eq(0);
  expect(await weth.balanceOf(zap.address)).eq(0);
};

export const beefOutAndSwap = async (
  stableCoin: ERC20,
  deployer: SignerWithAddress,
  zap: CommonZapOneInch,
  vault: VaultV7,
  weth: IWETH,
  cbETH: ERC20
) => {
  const withdrawAmount = await vault.balanceOf(deployer.address);

  const encodedData = ethers.utils.defaultAbiCoder.encode(
    [
      {
        type: "tuple",
        components: [
          // @ts-ignore
          { name: "inputToken0", type: "bytes" },
          // @ts-ignore
          { name: "inputToken1", type: "bytes" },
        ],
      },
    ],
    [
      {
        inputToken0: "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000002ae3f1ec7f1f5012cfeab0185bfc7aa3cf0dec22000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d400000000000000000000000000000000000000000000000002c4f5b16f49efc6000000000000000000000000000000000000000000000000000000000dbe957a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059100000000000000000000000000000000000000000000000000000000057300a0c9e75c48000000000000000006040000000000000000000000000000000000000000000000000005450002fe00a007e5c0d20000000000000000000000000000000000000000000002da00027700004f00a0fbb7cd0600fb4c2e6e6e27b5b4a07a36360c89ede29bb3c9b60000000000000000000000262ae3f1ec7f1f5012cfeab0185bfc7aa3cf0dec22420000000000000000000000000000000000000600a0c9e75c48000000000000002309060000000000000000000000000000000000000000000001fa0000ca00004f02a00000000000000000000000000000000000000000000000000000000000a8cd58ee63c1e501f6c0a374a483101e04ef5f7ac9bd15d9142bac9542000000000000000000000000000000000000060c20420000000000000000000000000000000000000641d160033c222e6f3722ec97379867324567d8836ae4071198002625a041d160033c222e6f3722ec97379867324567d8830000000000000000000000000000000000000000000000000000000000fd43674200000000000000000000000000000000000006512001538aa697ce8cc8252c70c41452dae86ce22a3e420000000000000000000000000000000000000600a4a5dcbcdf0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca00000000000000000000000006e6736ca9e922766279a22b75a600fe8b8473b6000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0fbb7cd06800c659734f1eef9c63b7ebdf78a164cdd745586db000000000000000000000046d9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca833589fcd6edb6e08f4c7c32d4f71b54bda029131111111254eeb25477b68fb85ed929f73a96058200a007e5c0d20000000000000000000000000000000000000000000000000002230000cc00a0c9e75c4800000000000000001f1300000000000000000000000000000000000000000000000000009e00004f02a000000000000000000000000000000000000000000000000000554ee64267c417ee63c1e5010e3a32b3b84dab844b16ecf9795122ce3c4462f82ae3f1ec7f1f5012cfeab0185bfc7aa3cf0dec2202a0000000000000000000000000000000000000000000000000008b2f75fbbb3bd8ee63c1e501129bdaf4a268018acc0fedc6022c215b9dc151892ae3f1ec7f1f5012cfeab0185bfc7aa3cf0dec2200a0c9e75c48000000000000001e12020000000000000000000000000000000000000000000001290000c600006302a00000000000000000000000000000000000000000000000000000000000546f84ee63c1e58172ab388e2e2f6facef59e3c3fa2c4e29011c2d3842000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a00000000000000000000000000000000000000000000000000000000002f7edb5ee63c1e581b775272e537cc670c65dc852908ad47015244eaf42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a00000000000000000000000000000000000000000000000000000000004f2de29ee63c1e581883e4ae0a817f2901500971b353b5dd89aa5218442000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000007e096b23",
        inputToken1: "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000610acfd59bef98f34740b780b81d04079ac732d400000000000000000000000000000000000000000000000002ef3e5f18881b5f000000000000000000000000000000000000000000000000000000000dcc806d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017500000000000000000000000000000000000000000000000000000000015700a0c9e75c48000000000000001e10040000000000000000000000000000000000000000000001290000c600006302a000000000000000000000000000000000000000000000000000000000011a9328ee63c1e581b775272e537cc670c65dc852908ad47015244eaf42000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a000000000000000000000000000000000000000000000000000000000046a9da0ee63c1e581883e4ae0a817f2901500971b353b5dd89aa5218442000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058202a00000000000000000000000000000000000000000000000000000000008474fa5ee63c1e581d0b53d9277642d899df5c87a3966a349a798f22442000000000000000000000000000000000000061111111254eeb25477b68fb85ed929f73a96058200000000000000000000007e096b23",
      },
    ]
  );

  const balanceStableCoinBefore = await stableCoin.balanceOf(deployer.address);
  console.log("Amount:", withdrawAmount);
  console.log("Stable before:", balanceStableCoinBefore);

  const balanceWethBefore = await ethers.provider.getBalance(deployer.address);
  const cbEthBalanceBefore = await cbETH.balanceOf(deployer.address);

  expect(await cbETH.balanceOf(zap.address)).eq(0);
  expect(await weth.balanceOf(zap.address)).eq(0);
  expect(withdrawAmount).gt(0);

  await vault.connect(deployer).approve(zap.address, withdrawAmount);

  await zap.beefOutAndSwap(vault.address, withdrawAmount, 5, weth.address, encodedData);

  const balanceStableCoinAfter = await stableCoin.balanceOf(deployer.address);
  console.log("Stable after:", balanceStableCoinAfter);
  const balanceWethAfter = await ethers.provider.getBalance(deployer.address);
  const cbEthBalanceAfter = await cbETH.balanceOf(deployer.address);
  expect(balanceStableCoinAfter.sub(balanceStableCoinBefore)).gt(0);
  expect(balanceWethAfter).lte(balanceWethBefore);
  expect(cbEthBalanceAfter).eq(cbEthBalanceBefore);
  expect(await weth.balanceOf(zap.address)).eq(0);
  expect(await stableCoin.balanceOf(zap.address)).eq(0);
  expect(await vault.balanceOf(deployer.address)).eq(0);
  expect(await vault.balanceOf(zap.address)).eq(0);
}
